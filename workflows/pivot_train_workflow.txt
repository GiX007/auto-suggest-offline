PIVOT STRUCTURE PREDICTION WORKFLOW (pivot_train)

PHASE 0: ENTRY POINT
---------------------
Function: run_pivot_prediction(..., mode='train')
File: src/main.py  
Purpose: Orchestrates the full pipeline for predicting pivot table structure (index vs. header split)

PHASE 1: LOAD SAMPLES
----------------------
1. load_operator_samples(pivot_dir, 'pivot')
   - File: src/data/sample_loader.py
   - Loads all sample folders from the pivot/ directory

2. load_sample(...)
   - File: src/data/sample_loader.py
   - Loads:
     * 'input_table' from data.csv
     * 'params' from param.json

PHASE 2: PROCESS SAMPLES
--------------------------
3. process_pivot_samples(pivot_samples)
   - File: src/features/pivot_features.py
   - Extracts:
     * index_columns (ground truth row dimensions)
     * header_columns (ground truth column dimensions)
     * values_columns and aggfunc
   - Filters out invalid or incomplete samples
   - Output: List of processed pivot samples

PHASE 3: EVALUATE MODEL ON TEST SET
------------------------------------
4. evaluate_pivot_split(test_samples)
   - File: src/models/pivot_model.py
   - For each test sample:
     * identify_dimension_measure_columns(...) (from src/models/pivot_model.py)
       - Heuristically identifies candidate dimension and measure columns if not provided
     * build_affinity_matrix(...) (from src/features/pivot_features.py)
     * solve_ampt(...) (from src/models/pivot_model.py)
       - Uses Stoer-Wagner algorithm to find optimal cut (fallback: greedy_ampt_split)
     * Compares predicted split with ground truth
     * Computes:
       - full_accuracy (exact match)
       - rand_index (pairwise agreement)
   - Saves:
     * results/metrics/all_operators_metrics.csv
   - Output: Evaluation metrics dictionary

PHASE 4: (NO TRAINING STEP REQUIRED)
-------------------------------------
- Pivot operator uses the AMPT algorithm (a graph-based method), not a trainable ML model
- Only affinity matrix construction and graph partitioning are used
- Model output is simply the saved placeholder file

PHASE 5: SAVE MODEL PLACEHOLDER
---------------------
5. open('models/pivot_model.pkl', 'w')
   - File: src/main.py
   - Writes placeholder file to indicate model was "trained" successfully

COMMAND TO RUN
---------------------
To execute the full pipeline described above, run the following command:

    python -m src.main --operator pivot --mode train

---------------------
